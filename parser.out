Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    SEMICOLON
    TEXT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> term
Rule 4     term -> term TIMES term
Rule 5     term -> term DIVIDE term
Rule 6     term -> NUMBER
Rule 7     term -> LPAREN expression RPAREN

Terminals, with rules where they appear

DIVIDE               : 5
EQUALS               : 
LPAREN               : 7
MINUS                : 2
NUMBER               : 6
PLUS                 : 1
RPAREN               : 7
SEMICOLON            : 
TEXT                 : 
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 7 0
term                 : 3 4 4 5 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 1
    term                           shift and go to state 2

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression

    PLUS            shift and go to state 5
    MINUS           shift and go to state 6


state 2

    (3) expression -> term .
    (4) term -> term . TIMES term
    (5) term -> term . DIVIDE term

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 3

    (6) term -> NUMBER .

    TIMES           reduce using rule 6 (term -> NUMBER .)
    DIVIDE          reduce using rule 6 (term -> NUMBER .)
    PLUS            reduce using rule 6 (term -> NUMBER .)
    MINUS           reduce using rule 6 (term -> NUMBER .)
    $end            reduce using rule 6 (term -> NUMBER .)
    RPAREN          reduce using rule 6 (term -> NUMBER .)


state 4

    (7) term -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 9
    term                           shift and go to state 2

state 5

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 10
    term                           shift and go to state 2

state 6

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 11
    term                           shift and go to state 2

state 7

    (4) term -> term TIMES . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    term                           shift and go to state 12

state 8

    (5) term -> term DIVIDE . term
    (4) term -> . term TIMES term
    (5) term -> . term DIVIDE term
    (6) term -> . NUMBER
    (7) term -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 4

    term                           shift and go to state 13

state 9

    (7) term -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression

    RPAREN          shift and go to state 14
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6


state 10

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 11

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 12

    (4) term -> term TIMES term .
    (4) term -> term . TIMES term
    (5) term -> term . DIVIDE term

    TIMES           reduce using rule 4 (term -> term TIMES term .)
    DIVIDE          reduce using rule 4 (term -> term TIMES term .)
    PLUS            reduce using rule 4 (term -> term TIMES term .)
    MINUS           reduce using rule 4 (term -> term TIMES term .)
    $end            reduce using rule 4 (term -> term TIMES term .)
    RPAREN          reduce using rule 4 (term -> term TIMES term .)

  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]


state 13

    (5) term -> term DIVIDE term .
    (4) term -> term . TIMES term
    (5) term -> term . DIVIDE term

    TIMES           reduce using rule 5 (term -> term DIVIDE term .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE term .)
    PLUS            reduce using rule 5 (term -> term DIVIDE term .)
    MINUS           reduce using rule 5 (term -> term DIVIDE term .)
    $end            reduce using rule 5 (term -> term DIVIDE term .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE term .)

  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]


state 14

    (7) term -> LPAREN expression RPAREN .

    TIMES           reduce using rule 7 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 7 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (term -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (term -> LPAREN expression RPAREN .)

